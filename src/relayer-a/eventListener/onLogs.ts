import { Log } from "viem";

import { Logger } from "../../common/utils/";

import { ConceroNetwork } from "../../types/ConceroNetwork";
import { requestCLFMessageReport } from "../businessLogic/requestCLFMessageReport";
import { submitCLFMessageReport } from "../businessLogic/submitCLFMessageReport";

export async function onRouterConceroSentLogs(logs: Log[], network: ConceroNetwork) {
    const eventLogger = Logger.getInstance().getLogger("EventListener");
    eventLogger.debug(`Processing ${logs.length} ConceroMessageSent logs from ${network.name}`);

    await requestCLFMessageReport(logs, network);
}

/**
 * Handle MessageReport events from ConceroVerifier.
 * This is triggered when a message report is generated by the verifier.
 */
export async function onVerifierMessageReportLogs(logs: Log[], network: ConceroNetwork) {
    const eventLogger = Logger.getInstance().getLogger("EventListener");
    eventLogger.debug(`Processing ${logs.length} MessageReport logs`);

    await submitCLFMessageReport(logs);
}

/**
 * Handle ConceroMessageReceived events from ConceroRouter.
 * This is triggered when a message is received on a destination chain.
 */
// export async function onRouterConceroReceivedLogs(logs: Log[], network: ConceroNetwork) {
//     if (logs.length === 0) return;

//     const eventLogger = Logger.getInstance().getLogger("EventListener");
//     eventLogger.debug(
//         `Processing ${logs.length} ConceroMessageReceived logs from ${network.name}`,
//     );

//     const decodedLogs = decodeLogs(logs, globalConfig.ABI.CONCERO_ROUTER);
//     const promises = [];

//     for (const log of decodedLogs) {
//         if (log.eventName === "ConceroMessageReceived") {
//             // Place your business logic here, e.g.:
//             // promises.push(handleConceroMessageReceived(log, network));
//         }
//     }

//     if (promises.length) {
//         await Promise.all(promises);
//     }
// }

/**
 * Handle MessageReportRequested events from ConceroVerifier.
 * This is triggered when a message report is requested from the verifier.
 */
// export async function onVerifierMessageReportRequestedLogs(logs: Log[], network: ConceroNetwork) {
//     if (logs.length === 0) return;

//     logger.debug(
//         `[onVerifierMessageReportRequestedLogs] Processing ${logs.length} MessageReportRequested logs`,
//     );

//     const decodedLogs = decodeLogs(logs, globalConfig.ABI.CONCERO_VERIFIER);
//     const promises = [];

//     for (const log of decodedLogs) {
//         if (log.eventName === "MessageReportRequested") {
//             // Place your business logic here, e.g.:
//             // promises.push(handleMessageReportRequested(log, network));
//         }
//     }

//     if (promises.length) {
//         await Promise.all(promises);
//     }
// }
